package gotrax

import "github.com/otrv4/ed448"
import . "gopkg.in/check.v1"

func (s *GotraxSuite) Test_ValidatePoint_checksThatThePointIsNotIdentity(c *C) {
	c.Assert(ValidatePoint(IdentityPoint), ErrorMatches, "given point is the identity point")
}

func (s *GotraxSuite) Test_ValidatePoint_checksThatThePointIsOnTheCurve(c *C) {
	p := ed448.NewPoint([16]uint32{
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
	}, [16]uint32{
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
	}, [16]uint32{
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
	}, [16]uint32{
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
		0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
	})

	c.Assert(ValidatePoint(p), ErrorMatches, "given point is not on the curve")
}

func (s *GotraxSuite) Test_ValidatePoint_checksThatThePointIsFine(c *C) {
	p := ed448.NewPoint([16]uint32{}, [16]uint32{}, [16]uint32{}, [16]uint32{})
	p.DSADecode([]byte{
		0xd9, 0xe9, 0xed, 0x15, 0xf1, 0x57, 0x6f, 0x39,
		0x80, 0xa4, 0x57, 0xa0, 0x3c, 0xc5, 0x9, 0xec,
		0xa0, 0x13, 0x90, 0x57, 0xfc, 0xb, 0x33, 0x36,
		0x55, 0x17, 0xf, 0x7f, 0x34, 0x8e, 0xe1, 0x15,
		0x19, 0xdc, 0x86, 0x2f, 0x82, 0xb, 0x3a, 0xe,
		0x42, 0x9, 0xc3, 0xdb, 0xd0, 0x5b, 0x93, 0x19,
		0x2c, 0x39, 0x96, 0x2a, 0x51, 0xfe, 0x58, 0xf9,
		0x0,
	})
	c.Assert(ValidatePoint(p), IsNil)
}

func (s *GotraxSuite) Test_GenerateKeypair_generatesWhatIsExpected(c *C) {
	kp := GenerateKeypair(ReaderIntoWithRandom(FixtureRand()))
	c.Assert(kp.Sym[:], DeepEquals, []byte{
		0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
		0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
		0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
		0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
		0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
		0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
		0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
		0xab,
	})
	c.Assert(kp.Priv.k.Encode(), DeepEquals, []byte{
		0x1a, 0x9f, 0xb0, 0xf5, 0xa1, 0xcc, 0x2e, 0xfc,
		0x78, 0xde, 0x54, 0xd8, 0xd9, 0xab, 0xc8, 0x56,
		0x64, 0xc7, 0x23, 0x1a, 0xe0, 0xcb, 0x8a, 0x12,
		0x1f, 0x85, 0x19, 0xac, 0xe8, 0xa5, 0xac, 0x70,
		0x96, 0xe8, 0x74, 0x2d, 0x92, 0x1c, 0xa7, 0xb3,
		0xe9, 0xab, 0x8d, 0x8e, 0x27, 0xdb, 0x3f, 0x3d,
		0x2c, 0xd1, 0x28, 0x1f, 0x73, 0xb3, 0xbb, 0x3d,
	})
	c.Assert(kp.Pub.k.DSAEncode(), DeepEquals, []byte{
		0x6d, 0xf0, 0x8d, 0xf3, 0x8, 0x94, 0x3a, 0xa0,
		0xb6, 0xed, 0x29, 0xc0, 0xeb, 0xd2, 0x69, 0x74,
		0xa7, 0xb9, 0xcc, 0x53, 0x4, 0xea, 0xf8, 0x89,
		0x73, 0xa6, 0x35, 0x62, 0x6, 0xc5, 0xd3, 0x26,
		0x63, 0x90, 0xd8, 0x19, 0xb2, 0xf9, 0x84, 0xc8,
		0xb9, 0x66, 0x9d, 0x68, 0xea, 0x73, 0x2f, 0x9a,
		0x17, 0x91, 0x1d, 0xd2, 0x36, 0x77, 0x81, 0x6e,
		0x0,
	})
}
